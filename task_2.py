"""
Задание 2.

Попытайтесь выполнить профилирование памяти в любом скрипте с рекурсией.

Вам нужно обнаружить проблему в процессе этого. Но проблема связана не с тем,
что рекурсия потребляет много памяти, а с самим процессом замеров.

Опищите эту проблему и найдите простой путь ее решения.
Опишите этот путь и покажите его применение.
"""
from memory_profiler import profile, memory_usage


def sum_series(n, rez=1, m=0, count=1):
    m1 = memory_usage()
    # базовый случай
    if n == 0:
        print(f'За {count} операций рекурсии использовано {m} Mib.')
        return rez
    else:
        # шаг рекурсии
        return rez + (-0.5) * sum_series(n - 1, rez, m + m1[0], count + 1)


@profile
def main_func():
    sum_series(10)


main_func()
print(sum_series(10))

"""РЕЗУЛЬТАТ ВЫПОЛНЕНИЯ КОДА"""
"""
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    26     17.7 MiB     17.7 MiB           1   @profile
    27                                         def main_func():
    28     17.8 MiB      0.0 MiB           1       sum_series(10)


За 11 операций рекурсии использовано 177.5 Mib.
0.6669921875
"""

"""Как мне показалось, декоратор profile профилирует только последнюю ступень рекурсии.
    Поэтому я попробовал добавить в саму рекурсию memory_usage(), чтобы высчитывать 
    каждый этап рекурсии и складывать использованную память в переменную m."""
