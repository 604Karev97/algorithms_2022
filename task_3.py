"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях
3) оцените итоговую сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

dct_societes = {
    'Jean Paul': 1000,
    'Rendez Vous': 540,
    'Grand Chataux': 3689,
    'Des champs': 1500
}
print(dct_societes)

"""
Первый способ.
Сложность: O(n + n log n)
"""


# ----------------------------------------
def find_top3_1(dct):
    top_3 = {}  # O(1)
    count = 0  # O(1)
    for k, v in sorted(dct.items(), key=lambda item: item[1], reverse=True):  # O(n + n log n) + O(1)
        if count < 3:  # O(len(count))
            top_3.setdefault(k, v)  # O(1)
            count += 1  # O(1)
    return top_3  # O(1)


print(find_top3_1(dct_societes))
# ----------------------------------------

"""
Второй способ.
Сложность: O(n^2)
"""


# ----------------------------------------
def find_top3_2(dct):
    max_key = 0  # O(1)
    top_3 = {}  # O(1)
    while len(top_3) < 3:  # O(n)
        max_val = 0  # O(1)
        for k, v in dct.items():  # O(n)
            if max_val < v:  # O(len(max_val))
                max_val = v  # O(1)
                max_key = k  # O(1)
        max_val = dct.pop(max_key)  # O(1)
        top_3.setdefault(max_key, max_val)  # O(1)
    return top_3  # O(1)


print(find_top3_2(dct_societes))
# ----------------------------------------
"""
Вывод:
Первое решение эффективнее, так как сложность этого решения меньше,
чем у второго (n+n log n) < (n^2). Этому способсвует более сложный метод
словаря sorted, который сокращает время выполнения функции.
"""
