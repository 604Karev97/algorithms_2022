"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
from pympler import asizeof


rand_num = 235624565656448921213554978452465151321815156487484421217546487888541212315464879784546487988142312149487356

""" Старый вариант кода """


def get_even_odd(num):
    lst_evens = [el for el in num if int(el) % 2 == 0]
    evens = len(lst_evens)
    odds = len(num) - evens
    print('Размер LC: ', asizeof.asizeof(lst_evens))
    return f"Четных чисел: {evens}\nНечетных чисел: {odds}"


print(get_even_odd(list(str(rand_num))))


""" Новый вариант кода """


def get_even_odd_opt(num):
    lst_evens = filter(lambda x: int(x) % 2 == 0, num)
    evens = len(list(lst_evens))
    odds = len(num) - evens
    print('Размер filter: ', asizeof.asizeof(lst_evens))
    return f"Четных чисел: {evens}\nНечетных чисел: {odds}"


print(get_even_odd_opt(list(str(rand_num))))

"""
Размер LC:  792
Четных чисел: 58
Нечетных чисел: 50
Размер filter:  48
Четных чисел: 58
Нечетных чисел: 50
"""

""" 
LC заменил на генератор filter с лямбда-функцией, тем самым уменьшил потребляемую памать,
так как в фильтре мы генерируем лишь только значения, а не весь массив, как в LC.
"""
