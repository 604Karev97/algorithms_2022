"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""

dct_users = {
    'mr_rocky': ['hash_pass_1', 'activated'],
    'jerryking': ['hash_pass_2', 'activated'],
    'mary_jane': ['hash_pass_3', 'activated'],
    'leroy88': ['hash_pass_4', 'closed'],
    'totosha': ['hash_pass_5', 'closed'],
    'AlbertoDelRio': ['hash_pass_6', 'activated'],
    'HHHTripleHHH': ['hash_pass_5', 'closed']
}
print(dct_users)

login = input('Login: ')
password = input('Password: ')

"""
Первый способ.
Сложность: O(N)
"""


# ----------------------------------------
def check_user1(dct, log, passw):
    if log in dct.keys():  # О(N)
        if passw == dct[log][0]:  # O(1)
            if dct[log][1] == 'activated':  # O(1)
                print('Добро пожаловать.')  # O(1)
            else:
                print('Вам необходимо пройти активацию.')  # O(1)
        else:
            print('Неверный пароль.')  # O(1)
    else:
        print('Такого пользователя не существует.')  # O(1)


check_user1(dct_users, login, password)
# ----------------------------------------

"""
Второй способ.
Сложность: O(N^2)
"""


# ----------------------------------------
def check_user2(dct, log, passw):
    msg = ''
    for k in dct.keys():  # O(N)
        if k == log:  # O(1)
            for v in dct[k]:  # O(N)
                if v == passw:  # O(1)
                    continue  # O(1)
                elif v == 'activated':  # O(1)
                    msg = 'Добро пожаловать.'  # O(1)
                    break  # O(1)
                elif v == 'closed':  # O(1)
                    msg = 'Необходимо пройти активацию.'  # O(1)
                    break  # O(1)
                elif v != passw:  # O(1)
                    msg = 'Неверный пароль'  # O(1)
                    break  # O(1)
            break  # O(1)
        else:  # O(1)
            msg = 'Неверный логин.'  # O(1)
    print(msg)  # O(1)


check_user2(dct_users, login, password)
# ----------------------------------------

"""
Третий способ.
Сложность: O(1)
"""


# ----------------------------------------
def check_user3(dct, log, passw):
    if dct.get(log):  # О(1)
        if passw == dct[log][0]:  # O(1)
            if dct[log][1] == 'activated':  # O(1)
                print('Добро пожаловать.')  # O(1)
            else:
                print('Вам необходимо пройти активацию.')  # O(1)
        else:
            print('Неверный пароль.')  # O(1)
    else:
        print('Такого пользователя не существует.')  # O(1)


check_user3(dct_users, login, password)
# ----------------------------------------

"""
Вывод:
Первое решение эффективнее, так как сложность этого решения меньше,
чем у второго (n) < (n^2). Второе решение осложняется наличием дополнительного цикла.
Но есть третье решение, у которого сложность О(1) - самое эффективное.
"""
